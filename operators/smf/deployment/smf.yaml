################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under
# the OAI Public License, Version 1.1  (the "License"); you may not use this file
# except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.openairinterface.org/?page_id=698
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: default
  name: oai-smf-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: oai-smf-operator-cluster-role
rules:
  - apiGroups: [""]
    resources: [events]
    verbs: [create]
  - apiGroups: [apiextensions.k8s.io]
    resources: [customresourcedefinitions]
    verbs: [get, list, watch, create, update, patch]
  # - apiGroups: ["workload.nephio.org"]
  #   resources: [smfdeployments]
  #   verbs: [list, watch]
  - apiGroups: ["workload.nephio.org"]
    resources: [smfdeployments,smfdeployments/status]
    verbs: [list, watch, update, patch]
  - apiGroups: [""]
    resources: [pods, serviceaccounts, configmaps, services, persistentvolumeclaims]
    verbs:  [get, list, watch, create, update, patch, delete]
  - apiGroups: ["apps","extensions"]
    resources: [deployments,deployments/status]
    verbs:  [get, list, watch, create, update, patch, delete]
  - apiGroups: ["k8s.cni.cncf.io"]
    resources: [network-attachment-definitions]
    verbs: [get, list, watch, create, update, patch, delete]
  - apiGroups: [""]
    resources: [namespaces]
    verbs: [list, watch]
  - apiGroups: [admissionregistration.k8s.io/v1, admissionregistration.k8s.io/v1beta1]
    resources: [validatingwebhookconfigurations, mutatingwebhookconfigurations]
    verbs: [create, patch]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: oai-smf-operator-rolebinding-cluster
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: oai-smf-operator-cluster-role
subjects:
  - kind: ServiceAccount
    name: oai-smf-operator
    namespace: default
## In case you want to restrict to a namespace uncomment this role and remove the rights from cluster role
#---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   namespace: default
#   name: oai-smf-operator-role
# rules:
#   # Framework: posting the events about the handlers progress/errors.
#   - apiGroups: [""]
#     resources: [events]
#     verbs: [create]
#   - apiGroups: ["workload.nephio.org"]
#     resources: [smfdeployments,smfdeployments/status]
#     verbs: [list, watch, update, patch]
#   - apiGroups: [""]
#     resources: [pods, serviceaccounts, configmaps, services, persistentvolumeclaims]
#     verbs:  [get, list, watch, create, update, patch, delete]
#   - apiGroups: ["apps","extensions"]
#     resources: [deployments,deployments/status]
#     verbs:  [get, list, watch, create, update, patch, delete]
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   namespace: default
#   name: oai-smf-operator-rolebinding-namespaced
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: Role
#   name: oai-smf-operator-role
# subjects:
#   - kind: ServiceAccount
#     name: oai-smf-operator
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: oai-smf-op-conf
data:
  smf.yaml: |
    nssai:
      - sst: 1
        sd: '0xFFFFFF'
        dnn: internet
        ipv4Range: '12.1.1.2 - 12.1.1.50'
        type: IPv4
        qosProfile5QI: 6
      - sst: 1
        sd: '0x1'
        dnn: oai
        ipv4Range: '12.1.1.50 - 12.1.1.100'
        type: IPv4
        qosProfile5QI: 2
    image: 'docker.io/oaisoftwarealliance/oai-smf:v1.5.1'
    ports: 
      - name: 'n4'
        port: 8805
        protocol: UDP
      - name: 'http'
        port: 80
        protocol: TCP
    fqdn:
      smf: localhost
      udm: localhost
      nrf: localhost
      upf: localhost
    ueSettings:
      dns: 8.8.8.8
      dnsSec: 4.4.4.4
      mtu: 1500
    nfInterfaces:
      n4: 'eth0'
      sbi: 'eth0'
    compute:
      req:
        cpu: '100m'
        memory: '512Mi'
      limits:
        cpu: '100m'
        memory: '512Mi'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: oai-smf-nf-conf
data:
  smf.conf: |
    SMF =
    {
        FQDN          = "oai-smf";
        INSTANCE      = {{ 0 }};         # 0 is the default
        PID_DIRECTORY = "/var/run";  # /var/run is the default
        LOG_LEVEL     = "{{ conf["logLevel"] if "logLevel" in conf.keys() else 'debug' }}";

        INTERFACES :
        {
            N4 :
            {
                # SMF binded interface for N4 communication (UPF)
                INTERFACE_NAME = "{{ conf['nfInterfaces']['n4'] if 'nfInterfaces' in conf.keys() and 'n4' in conf['nfInterfaces'].keys() else 'eth0' }}"; # YOUR NETWORK CONFIG HERE
                IPV4_ADDRESS   = "read";
             };

            SBI :
            {
                # SMF binded interface for SBI interface (e.g., communication with AMF, UDM)
                INTERFACE_NAME = "{{ conf['nfInterfaces']['sbi'] if 'nfInterfaces' in conf.keys() and 'sbi' in conf['nfInterfaces'].keys() else 'eth0' }}";     # YOUR NETWORK CONFIG HERE
                IPV4_ADDRESS   = "read";
                # YOUR NETWORK CONFIG HERE (default: 80)
                PORT           = 80;
                # YOUR NETWORK CONFIG HERE (default: 8080)
                HTTP2_PORT     = 8080;
                # YOUR NETWORK CONFIG HERE (default: v1)
                API_VERSION    = "v1";
             };

        };

        # DNN configurations with pool of UE assigned IP addresses
        # Do not make IP pools overlap
        # first IPv4 address X.Y.Z.1 is reserved for GTP network device on UPF
        DNN_LIST = (
           # PDU_SESSION_TYPE choice in {IPv4, IPv6, IPv4v6}
           # DNN IP ADDRESS RANGE format is for example: "12.2.1.2 - 12.2.1.128"
          {
            DNN_NI = "{{ conf['nssai'][0]['dnn'] }}";
            PDU_SESSION_TYPE = "{{ conf['nssai'][0]['type'] if "type" in conf['nssai'][0].keys() else 'IPv4' }}";
            IPV4_RANGE = "{{ conf['nssai'][0]['ipv4Range'] }}";
            IPV6_PREFIX = "2001:1:2::/64"
          }
          {% set nssai = conf['nssai'].copy() %}
          {% do nssai.pop(0) %}
          {% for i in nssai %}
          ,{
            DNN_NI = "{{ i['dnn'] }}";
            PDU_SESSION_TYPE = "{{ i['type'] if "type" in i.keys() else 'IPv4' }}";
            IPV4_RANGE = "{{ i['ipv4Range'] }}";
            IPV6_PREFIX = "2001:1:2::/64"
          }
          {% endfor %}
        );

        # DNS address communicated to UEs
        DEFAULT_DNS_IPV4_ADDRESS     = "{{ conf['ueSettings']['dns'] }}";      # YOUR DNS CONFIG HERE
        DEFAULT_DNS_SEC_IPV4_ADDRESS = "{{ conf['ueSettings']['dnsSec'] }}";  # YOUR DNS CONFIG HERE
        DEFAULT_DNS_IPV6_ADDRESS     = "2001:4860:4860::8888";            # YOUR DNS CONFIG HERE
        DEFAULT_DNS_SEC_IPV6_ADDRESS = "2001:4860:4860::8844";            # YOUR DNS CONFIG HERE

        #Default P-CSCF server
        DEFAULT_CSCF_IPV4_ADDRESS = "{{ conf['cscfAddress'] if "cscfAddress" in conf.keys() else '127.0.0.1' }}";
        DEFAULT_CSCF_IPV6_ADDRESS = "fe80::7915:f408:1787:db8b";

        #Default UE MTU
        UE_MTU = {{ conf['ueSettings']['mtu'] if "mtu" in conf['ueSettings'].keys() else '1500' }};

        # SUPPORT FEATURES
        SUPPORT_FEATURES:
        {
          # STRING, {"yes", "no"},
          # Set to yes if SMF resgisters to an NRF
          REGISTER_NRF = "yes";
          # Set to yes to enable UPF discovery and selection
          DISCOVER_UPF = "yes";
          # Set to yes to enable PCF discovery and selection
          DISCOVER_PCF = "no";
          # Non standard feature, normally should be set to "no",
          # but you may need to set to yes for UE that do not explicitly request a PDN address through NAS signalling
          FORCE_PUSH_PROTOCOL_CONFIGURATION_OPTIONS = "no";
          # Set to yes if SMF uses local subscription information instead of from an UDM
          USE_LOCAL_SUBSCRIPTION_INFO = "no";
          # Set to yes if SMF uses local PCC rules instead of from an PCF
          USE_LOCAL_PCC_RULES = "yes";
          # Set to yes if AMF/UDM/NRF/UPF will relying on a DNS to resolve FQDN
          USE_FQDN_DNS = "yes";
          # Default: 1
          HTTP_VERSION = 1;
          # Set yes if UE USAGE REPORTING is to be done at UPF
          ENABLE_USAGE_REPORTING = "no"
          # Set yes if Downlink PDR is to be included in PFCP session establishment message
          ENABLE_DL_PDR_IN_PFCP_SESS_ESTAB = "no"
          # Set N3_LOCAL_IPV4_ADDRESS for SD-Fabric UPF
          N3_LOCAL_IPV4_ADDRESS = "0.0.0.0";
        }

        AMF :
        {
          IPV4_ADDRESS = "127.0.0.1";
          PORT         = 80;
          API_VERSION  = "v1";
          FQDN         = "{{ conf['fqdn']['smf'] if 'fqdn' in conf.keys() and 'smf' in conf['fqdn'].keys() else 'oai-smf' }}"
        };

        UDM :
        {
          IPV4_ADDRESS = "127.0.0.1";
          PORT         = 80;
          API_VERSION  = "v1";
          FQDN         = "{{ conf['fqdn']['udm'] if 'fqdn' in conf.keys() and 'udm' in conf['fqdn'].keys() else 'oai-udm' }}"
        };

        NRF :
        {
          IPV4_ADDRESS = "127.0.0.1";
          PORT         = 80;
          API_VERSION  = "v1";
          FQDN         = "{{ conf['fqdn']['nrf'] if 'fqdn' in conf.keys() and 'nrf' in conf['fqdn'].keys() else 'oai-nrf' }}"
        };

        PCF :
        {
          IPV4_ADDRESS = "127.0.0.1";
          PORT         = 80;
          API_VERSION  = "v1";
          FQDN         = "localhost"
        };

        UPF_LIST = (
          {
            IPV4_ADDRESS = "127.0.0.1";
            FQDN         = "{{ conf['fqdn']['upf'] if 'fqdn' in conf.keys() and 'upf' in conf['fqdn'].keys() else 'oai-upf' }}";
            NWI_LIST     = (
              {
                DOMAIN_ACCESS  = "access.oai.org",
                DOMAIN_CORE    = "core.oai.org"
              }
            )
          }
        );

        LOCAL_CONFIGURATION :
        {
          SESSION_MANAGEMENT_SUBSCRIPTION_LIST = (
             {
               NSSAI_SST = {{ conf['nssai'][0]['sst'] }},
               NSSAI_SD = "{{ conf['nssai'][0]['sd'] if "sd" in conf['nssai'][0].keys() else '0xFFFFFF' }}",
               DNN = "{{ conf['nssai'][0]['dnn'] }}",
               DEFAULT_SESSION_TYPE = "{{ conf['nssai'][0]['type'] if "type" in conf['nssai'][0].keys() else 'IPv4' }}",
               DEFAULT_SSC_MODE = 1,
               QOS_PROFILE_5QI = {{ conf['nssai'][0]['qosProfile5QI'] if "qosProfile5QI" in conf['nssai'][0].keys() else '6' }},
               QOS_PROFILE_PRIORITY_LEVEL = 1,
               QOS_PROFILE_ARP_PRIORITY_LEVEL = 1,
               QOS_PROFILE_ARP_PREEMPTCAP = "NOT_PREEMPT",
               QOS_PROFILE_ARP_PREEMPTVULN = "NOT_PREEMPTABLE",
               SESSION_AMBR_UL = "{{ conf['nssai'][0]['sessionAmbrUL'] if "sessionAmbrUL" in conf['nssai'][0].keys() else '1000Mbps' }}",
               SESSION_AMBR_DL = "{{ conf['nssai'][0]['sessionAmbrDL'] if "sessionAmbrDL" in conf['nssai'][0].keys() else '1500Mbps' }}"
             }
            {% do conf['nssai'].pop(0) %}
            {% for i in conf['nssai'] %}
             ,{
               NSSAI_SST = {{ i['sst'] }},
               NSSAI_SD = "{{ i['sd'] if "sd" in i.keys() else '0xFFFFFF' }}",
               DNN = "{{ i['dnn'] }}",
               DEFAULT_SESSION_TYPE = "{{ i['type'] if "type" in i.keys() else 'IPv4' }}",
               DEFAULT_SSC_MODE = 1,
               QOS_PROFILE_5QI = {{ i['qosProfile5QI'] if "qosProfile5QI" in i.keys() else '6' }},
               QOS_PROFILE_PRIORITY_LEVEL = 1,
               QOS_PROFILE_ARP_PRIORITY_LEVEL = 1,
               QOS_PROFILE_ARP_PREEMPTCAP = "NOT_PREEMPT",
               QOS_PROFILE_ARP_PREEMPTVULN = "NOT_PREEMPTABLE",
               SESSION_AMBR_UL = "{{ i['sessionAmbrUL'] if "sessionAmbrUL" in i.keys() else '1000Mbps' }}",
               SESSION_AMBR_DL = "{{ i['sessionAmbrDL'] if "sessionAmbrDL" in i.keys() else '1500Mbps' }}"
             }
            {% endfor %}
            );
        };

    };

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oai-smf-controller
  labels:
    app.kubernetes.io/name: oai-smf
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: oai-smf
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: oai-smf
    spec:
      securityContext:
        runAsGroup: 0
        runAsUser: 0
      imagePullSecrets:
      - name: regcred
      containers:
      - name: smf-controller
        image: "docker.io/arorasagar/oai-smf-controller:v1.5.1"
        imagePullPolicy: IfNotPresent
        env:
          - name: 'NF_TYPE'
            value: 'smf'
          - name: 'DEPLOYMENT_FETCH_INTERVAL'
            value: '1'
          - name: 'DEPLOYMENT_FETCH_ITERATIONS'
            value: '100'
          - name: 'NF_CONF_PATH'
            value: '/tmp/nf/smf.conf'
          - name: 'OP_CONF_PATH'
            value: '/tmp/op/smf.yaml'
          - name: 'TESTING'
            value: 'yes'
        volumeMounts:
          - mountPath: /tmp/op
            name: opconf
          - mountPath: /tmp/nf
            name: nfconf
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "50m"
        # livenessProbe:
        #   httpGet:
        #     path: /healthz
        #     port: 8080
        #   initialDelaySeconds: 2
        #   periodSeconds: 5
      volumes:
      - configMap:
          name: oai-smf-op-conf
        name: opconf
      - configMap:
          name: oai-smf-nf-conf
        name: nfconf
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      serviceAccountName: oai-smf-operator
      terminationGracePeriodSeconds: 5
