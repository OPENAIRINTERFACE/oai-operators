################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under
# the OAI Public License, Version 1.1  (the "License"); you may not use this file
# except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.openairinterface.org/?page_id=698
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: default
  name: oai-udr-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: oai-udr-operator-cluster-role
rules:
  - apiGroups: [""]
    resources: [events]
    verbs: [create]
  - apiGroups: [apiextensions.k8s.io]
    resources: [customresourcedefinitions]
    verbs: [get, list, watch, create, update, patch]
  # - apiGroups: ["workload.nephio.org"]
  #   resources: [udrdeployments]
  #   verbs: [list, watch]
  - apiGroups: ["workload.nephio.org"]
    resources: [udrdeployments,udrdeployments/status]
    verbs: [list, watch, update, patch]
  - apiGroups: [""]
    resources: [pods, serviceaccounts, configmaps, services, persistentvolumeclaims]
    verbs:  [get, list, watch, create, update, patch, delete]
  - apiGroups: ["apps","extensions"]
    resources: [deployments,deployments/status]
    verbs:  [get, list, watch, create, update, patch, delete]
  - apiGroups: ["k8s.cni.cncf.io"]
    resources: [network-attachment-definitions]
    verbs: [get, list, watch, create, update, patch, delete]
  - apiGroups: [""]
    resources: [namespaces]
    verbs: [list, watch]
  - apiGroups: [admissionregistration.k8s.io/v1, admissionregistration.k8s.io/v1beta1]
    resources: [validatingwebhookconfigurations, mutatingwebhookconfigurations]
    verbs: [create, patch]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: oai-udr-operator-rolebinding-cluster
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: oai-udr-operator-cluster-role
subjects:
  - kind: ServiceAccount
    name: oai-udr-operator
    namespace: default
## In case you want to restrict to a namespace uncomment this role and remove the rights from cluster role
#---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   namespace: default
#   name: oai-udr-operator-role
# rules:
#   # Framework: posting the events about the handlers progress/errors.
#   - apiGroups: [""]
#     resources: [events]
#     verbs: [create]
#   - apiGroups: ["workload.nephio.org"]
#     resources: [udrdeployments,udrdeployments/status]
#     verbs: [list, watch, update, patch]
#   - apiGroups: [""]
#     resources: [pods, serviceaccounts, configmaps, services, persistentvolumeclaims]
#     verbs:  [get, list, watch, create, update, patch, delete]
#   - apiGroups: ["apps","extensions"]
#     resources: [deployments,deployments/status]
#     verbs:  [get, list, watch, create, update, patch, delete]
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   namespace: default
#   name: oai-udr-operator-rolebinding-namespaced
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: Role
#   name: oai-udr-operator-role
# subjects:
#   - kind: ServiceAccount
#     name: oai-udr-operator
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: oai-udr-op-conf
data:
  udr.yaml: |
    image: 'docker.io/oaisoftwarealliance/oai-udr:v1.5.1'
    imagePullSecrets:
      - name: test
    database:
      server: mysql
    ports: 
      - name: 'http'
        port: 80
        protocol: TCP
    compute:
      req:
        cpu: '100m'
        memory: '512Mi'
      limits:
        cpu: '100m'
        memory: '512Mi'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: oai-udr-nf-conf
data:
  udr.conf: |
    UDR =
    {
      # 0 is the default
      INSTANCE_ID   = 0;
      # /var/run is the default
      PID_DIRECTORY = "/var/run";
      UDR_NAME      = "oai-udr";
      LOG_LEVEL = "{{ conf["logLevel"] if "logLevel" in conf.keys() else 'debug' }}";

      SUPPORT_FEATURES:{
        # Set to yes if UDR will relying on a DNS to resolve UDM's FQDN
        USE_FQDN_DNS = "no";
        # Set to yes if UDR resgisters to an NRF
        REGISTER_NRF = "no";
        # Set to yes to enable HTTP2 for UDR server
        USE_HTTP2    = "no";
        # Set to 'MySQL'/'Cassandra' to use MySQL/Cassandra
        DATABASE     = "MySQL";
      };

      INTERFACES:
      {
        # NUDR Interface (SBI)
        NUDR:
        {
          INTERFACE_NAME = "{{ conf['nfInterfaces']['sbi'] if 'nfInterfaces' in conf.keys() and 'sbi' in conf['nfInterfaces'].keys() else 'eth0' }}";
          IPV4_ADDRESS   = "read";
          # Default value: 80
          PORT           = 80;
          HTTP2_PORT     = 8080;
          API_VERSION    = "v1";
        };
      };

      NRF:
      {
        IPV4_ADDRESS = "127.0.0.1";
        # YOUR NRF CONFIG HERE (default: 80)
        PORT         = 80;
        # YOUR NRF API VERSION HERE
        API_VERSION  = "v1";
        FQDN         = "{{ conf['fqdn']['nrf'] if 'fqdn' in conf.keys() and 'nrf' in conf['fqdn'].keys() else 'oai-nrf' }}";
      };

      MYSQL:
      {
        # MySQL Server address
        MYSQL_SERVER = "{{ conf['database']['server'] if "server" in conf['database'].keys() else 'mysql' }}";
        MYSQL_USER   = "{{ conf['database']['user'] if "user" in conf['database'].keys() else 'test' }}";   # Database server login
        MYSQL_PASS   = "{{ conf['database']['password'] if "password" in conf['database'].keys() else 'test' }}";   # Database server password
        MYSQL_DB     = "{{ conf['database']['dbName'] if "dbName" in conf['database'].keys() else 'oai_db' }}";     # Your database name
        # Reset the connection to the DB after expiring the timeout (in second)
        DB_CONNECTION_TIMEOUT = {{ conf['database']['dbName'] if "dbName" in conf['database'].keys() else '300' }};
      };
    };
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oai-udr-controller
  labels:
    app.kubernetes.io/name: oai-udr
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: oai-udr
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: oai-udr
    spec:
      securityContext:
        runAsGroup: 0
        runAsUser: 0
      imagePullSecrets:
      - name: regcred
      containers:
      - name: udr-controller
        image: "oai-udr-controller:v1.5.1"
        imagePullPolicy: IfNotPresent
        env:
          - name: 'NF_TYPE'
            value: 'udr'
          - name: 'DEPLOYMENT_FETCH_INTERVAL'
            value: '1'
          - name: 'DEPLOYMENT_FETCH_ITERATIONS'
            value: '100'
          - name: 'NF_CONF_PATH'
            value: '/tmp/nf/udr.conf'
          - name: 'OP_CONF_PATH'
            value: '/tmp/op/udr.yaml'
          - name: 'TESTING'
            value: 'yes'
        volumeMounts:
          - mountPath: /tmp/op
            name: opconf
          - mountPath: /tmp/nf
            name: nfconf
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "50m"
        # livenessProbe:
        #   httpGet:
        #     path: /healthz
        #     port: 8080
        #   initialDelaySeconds: 2
        #   periodSeconds: 5
      volumes:
      - configMap:
          name: oai-udr-op-conf
        name: opconf
      - configMap:
          name: oai-udr-nf-conf
        name: nfconf
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      serviceAccountName: oai-udr-operator
      terminationGracePeriodSeconds: 5
