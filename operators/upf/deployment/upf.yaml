################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under
# the terms found in the LICENSE file in the root of this source tree.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
##################################################################################
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: default
  name: oai-upf-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: oai-upf-operator-cluster-role
rules:
  - apiGroups: [""]
    resources: [events]
    verbs: [create]
  - apiGroups: ["security.openshift.io"]
    resources: ["securitycontextconstraints"]
    resourceNames: ["privileged"]
    verbs: [use]
  - apiGroups: [apiextensions.k8s.io]
    resources: [customresourcedefinitions]
    verbs: [get, list, watch, create, update, patch]
  - apiGroups: ["ref.nephio.org"]
    resources: [configs,config]
    verbs: [list, watch, update, patch, get]
  - apiGroups: ["rbac.authorization.k8s.io"]
    resources: [roles,rolebindings]
    verbs: [get, create, delete, patch]
  - apiGroups: ["workload.nephio.org"]
    resources: [nfdeployments,nfdeployments/status,nfconfigs,nfdeployments/finalizers]
    verbs: [get, list, watch, update, patch]
  - apiGroups: [""]
    resources: [pods, serviceaccounts, configmaps, services, persistentvolumeclaims,services/finalizers,serviceaccounts/finalizers]
    verbs:  [get, list, watch, create, update, patch, delete]
  - apiGroups: ["apps","extensions"]
    resources: [deployments,deployments/status,deployments/finalizers]
    verbs:  [get, list, watch, create, update, patch, delete]
  - apiGroups: ["k8s.cni.cncf.io"]
    resources: [network-attachment-definitions]
    verbs: [get, list, watch, create, update, patch, delete]
  - apiGroups: [""]
    resources: [namespaces]
    verbs: [list, watch]
  - apiGroups: [admissionregistration.k8s.io/v1, admissionregistration.k8s.io/v1beta1]
    resources: [validatingwebhookconfigurations, mutatingwebhookconfigurations]
    verbs: [create, patch]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: oai-upf-operator-rolebinding-cluster
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: oai-upf-operator-cluster-role
subjects:
  - kind: ServiceAccount
    name: oai-upf-operator
    namespace: default
## In case you want to restrict to a namespace uncomment this role and remove the rights from cluster role
#---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   namespace: default
#   name: oai-upf-operator-role
# rules:
#   # Framework: posting the events about the handlers progress/errors.
#   - apiGroups: [""]
#     resources: [events]
#     verbs: [create]
#   - apiGroups: ["workload.nephio.org"]
#     resources: [upfdeployments,upfdeployments/status]
#     verbs: [list, watch, update, patch]
#   - apiGroups: [""]
#     resources: [pods, serviceaccounts, configmaps, services, persistentvolumeclaims]
#     verbs:  [get, list, watch, create, update, patch, delete]
#   - apiGroups: ["apps","extensions"]
#     resources: [deployments,deployments/status]
#     verbs:  [get, list, watch, create, update, patch, delete]
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   namespace: default
#   name: oai-upf-operator-rolebinding-namespaced
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: Role
#   name: oai-upf-operator-role
# subjects:
#   - kind: ServiceAccount
#     name: oai-upf-operator
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: oai-upf-op-conf
data:
  upf.yaml: |
    nad: 
      parent: 'eth0'
      create: False
    ports:
      - name: 'n3n9'
        port: 2152
        protocol: UDP
      - name: 'n4'
        port: 8805
        protocol: UDP
      - name: 'sbi'
        port: 80
        protocol: TCP
    nfInterfaces:
      sbi: 'eth0'
      n3: 'n3'
      n4: 'n4'
      n6: 'n6'
      n9: 'eth0'
    compute:
      req:
        cpu: '100m'
        memory: '512Mi'
      limits:
        cpu: '100m'
        memory: '512Mi'
    logLevel: info
    image: 'docker.io/oaisoftwarealliance/oai-upf:v2.0.0'
    fqdn:
      nrf: 'localhost'
      smf: 'localhost'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: oai-upf-nf-conf
data:
  upf.yaml: |
    ############# Common configuration
    # Log level for all the NFs
    log_level:
      upf: {{ conf['logLevel'] }}
    # If you enable registration, the other NFs will use the NRF discovery mechanism
    register_nf:
      upf: 'yes'
    http_version: 2
    ## general single_nssai configuration
    ## Defines YAML anchors, which are reused in the config file
    snssais:
      {%- for i in conf['PLMN']['plmnInfo']%}
      {%- for s in i['nssai']%}
      - &slice_{{ i['nssai'].index(s) }}
        sst: {{ s['sst'] }}
        sd: {{ s['sd'] if 'sd' in s.keys() else 'FFFFFF' }}
      {%- endfor %}
      {%- endfor %}
    ############## SBI Interfaces
    ### Each NF takes its local SBI interfaces and remote interfaces from here, unless it gets them using NRF discovery mechanisms
    nfs:
      upf:
        host: {{ conf['fqdn']['upf'] }}
        sbi:
          port: 80
          api_version: v1
          interface_name: {{ conf['nfInterfaces']['sbi'] }}
        n3:
          interface_name: {{ conf['nfInterfaces']['n3'] }}
          port: 2152
        n4:
          interface_name: {{ conf['nfInterfaces']['n4'] }}
          port: 8805
        n6:
          interface_name: {{ conf['nfInterfaces']['n6'] }}
        n9:
          interface_name: {{ conf['nfInterfaces']['n9'] }}
          port: 2152
      smf:
        host: {{ conf['fqdn']['smf'] }}
        sbi:
          port: 80
        n4:
          port: 8805
      nrf:
        host: {{ conf['fqdn']['nrf'] }}
        sbi:
          port: 80
          api_version: v1

    ############## NF-specific configuration
    upf:
      support_features:
        enable_bpf_datapath: no    # If "on": BPF is used as datapath else simpleswitch is used, DEFAULT= off
        enable_snat: yes           # If "on": Source natting is done for UE, DEFAULT= off
      remote_n6_gw: 127.0.0.1      # Dummy host since simple-switch does not use N6 GW
      upf_info:
        sNssaiUpfInfoList:
          {%- for i in conf['PLMN']['plmnInfo'] %}
          {%- for x in i['nssai'] %}
          - sNssai: *slice_{{ i['nssai'].index(x) }}
            dnnUpfInfoList:
          {%- for d in x['dnnInfo'] %}
              - dnn: {{ d['name'] }}
          {%- endfor %}
          {%- endfor %}
          {%- endfor %}
    ## DNN configuration
    dnns:
      {%- for i in conf['PLMN']['plmnInfo'] %}
      {%- for x in i['nssai'] %}
      {%- for d in x['dnnInfo'] %}
      - dnn: "{{ d['name'] }}"
        pdu_session_type: "IPV4"
        ipv4_subnet: "{{ d['subnet'] }}"
      {%- endfor %}
      {%- endfor %}
      {%- endfor %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oai-upf-controller
  labels:
    app.kubernetes.io/name: oai-upf
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: oai-upf
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: oai-upf
    spec:
      securityContext:
        runAsGroup: 0
        runAsUser: 0
      imagePullSecrets:
      - name: regcred
      containers:
      - name: upf-controller
        image: docker.io/arorasagar/oai-upf-controller:v2.0.1
        imagePullPolicy: IfNotPresent
        env:
          - name: 'NF_TYPE'
            value: 'upf'
          - name: 'DEPLOYMENT_FETCH_INTERVAL'
            value: '1'
          - name: 'DEPLOYMENT_FETCH_ITERATIONS'
            value: '100'
          - name: 'NF_CONF_PATH'
            value: '/tmp/nf/upf.yaml'
          - name: 'OP_CONF_PATH'
            value: '/tmp/op/upf.yaml'
          - name: 'TESTING'
            value: 'yes'
          - name: 'KUBERNETES_BASE_URL'
            value: 'http://kubernetes.default.svc'
        volumeMounts:
          - mountPath: /tmp/op
            name: opconf
          - mountPath: /tmp/nf
            name: nfconf
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        # livenessProbe:
        #   httpGet:
        #     path: /healthz
        #     port: 8080
        #   initialDelaySeconds: 2
        #   periodSeconds: 5
      volumes:
      - configMap:
          name: oai-upf-op-conf
        name: opconf
      - configMap:
          name: oai-upf-nf-conf
        name: nfconf
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      serviceAccountName: oai-upf-operator
      terminationGracePeriodSeconds: 5