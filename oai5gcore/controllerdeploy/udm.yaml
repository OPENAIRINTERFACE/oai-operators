################################################################################
# Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The OpenAirInterface Software Alliance licenses this file to You under
# the OAI Public License, Version 1.1  (the "License"); you may not use this file
# except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.openairinterface.org/?page_id=698
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#-------------------------------------------------------------------------------
# For more information about the OpenAirInterface (OAI) Software Alliance:
#      contact@openairinterface.org
################################################################################
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: oaiops
  name: oai-udm-operator
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: oai-udm-operator-cluster-role
rules:
  - apiGroups: [""]
    resources: [events]
    verbs: [create]
  - apiGroups: [apiextensions.k8s.io]
    resources: [customresourcedefinitions]
    verbs: [get, list, watch, create, update, patch]
  # - apiGroups: ["workload.nephio.org"]
  #   resources: [udmdeployments]
  #   verbs: [list, watch]
  - apiGroups: ["workload.nephio.org"]
    resources: [udmdeployments,udmdeployments/status]
    verbs: [list, watch, update, patch]
  - apiGroups: [""]
    resources: [pods, serviceaccounts, configmaps, services, persistentvolumeclaims]
    verbs:  [get, list, watch, create, update, patch, delete]
  - apiGroups: ["apps","extensions"]
    resources: [deployments,deployments/status]
    verbs:  [get, list, watch, create, update, patch, delete]
  - apiGroups: ["k8s.cni.cncf.io"]
    resources: [network-attachment-definitions]
    verbs: [get, list, watch, create, update, patch, delete]
  - apiGroups: [""]
    resources: [namespaces]
    verbs: [list, watch]
  - apiGroups: [admissionregistration.k8s.io/v1, admissionregistration.k8s.io/v1beta1]
    resources: [validatingwebhookconfigurations, mutatingwebhookconfigurations]
    verbs: [create, patch]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: oai-udm-operator-rolebinding-cluster
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: oai-udm-operator-cluster-role
subjects:
  - kind: ServiceAccount
    name: oai-udm-operator
    namespace: oaiops
## In case you want to restrict to a namespace uncomment this role and remove the rights from cluster role
#---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   namespace: oaiops
#   name: oai-udm-operator-role
# rules:
#   # Framework: posting the events about the handlers progress/errors.
#   - apiGroups: [""]
#     resources: [events]
#     verbs: [create]
#   - apiGroups: ["workload.nephio.org"]
#     resources: [udmdeployments,udmdeployments/status]
#     verbs: [list, watch, update, patch]
#   - apiGroups: [""]
#     resources: [pods, serviceaccounts, configmaps, services, persistentvolumeclaims]
#     verbs:  [get, list, watch, create, update, patch, delete]
#   - apiGroups: ["apps","extensions"]
#     resources: [deployments,deployments/status]
#     verbs:  [get, list, watch, create, update, patch, delete]
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   namespace: oaiops
#   name: oai-udm-operator-rolebinding-namespaced
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: Role
#   name: oai-udm-operator-role
# subjects:
#   - kind: ServiceAccount
#     name: oai-udm-operator
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: oai-udm-op-conf
  namespace: oaiops
data:
  udm.yaml: |
    image: 'docker.io/oaisoftwarealliance/oai-udm:v1.5.1'
    ports: 
      - name: 'http'
        port: 80
        protocol: TCP
    fqdn:
      nrf: 'nrf-regional'
      udr: 'udr-regional'
    compute:
      req:
        cpu: '100m'
        memory: '256Mi'
      limits:
        cpu: '100m'
        memory: '256Mi'
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: oai-udm-nf-conf
  namespace: oaiops
data:
  udm.conf: |
    UDM =
    {
      INSTANCE_ID = 0;
      PID_DIRECTORY = "/var/run";
      UDM_NAME = "oai-udm";
      LOG_LEVEL = "{{ conf["logLevel"] if "logLevel" in conf.keys() else 'debug' }}";

      INTERFACES:{
        # UDM binded interface for SBI interface (e.g., communication with UDR, AUSF)
        SBI:{
            INTERFACE_NAME = "{{ conf['nfInterfaces']['sbi'] if 'nfInterfaces' in conf.keys() and 'sbi' in conf['nfInterfaces'].keys() else 'eth0' }}";
            IPV4_ADDRESS   = "read";
            # YOUR NETWORK CONFIG HERE (default: 80)
            PORT           = 80;
            PPID           = 60;
            # YOUR NETWORK CONFIG HERE (default: v1)
            API_VERSION    = "v1";
            # YOUR NETWORK CONFIG HERE (default: 8080)
            HTTP2_PORT     = 8080;
        };
      };

      # SUPPORT FEATURES
      SUPPORT_FEATURES: {
        # STRING, {"yes", "no"},
        # Set to yes if UDM will relying on a DNS to resolve UDR's FQDN
        USE_FQDN_DNS = "yes";
        # Set to yes to enable HTTP2 for AUSF server
        USE_HTTP2    = "no";
        # Set to 'yes' if UDM resgisters to an NRF
        REGISTER_NRF = "no";
      }

      UDR:{
        IPV4_ADDRESS   = "127.0.0.1";
        # YOUR NETWORK CONFIG HERE (default: 80)
        PORT           = 80;
        # YOUR API VERSION FOR UDR CONFIG HERE (default: v1)
        API_VERSION    = "v1";
        FQDN           = "{{ conf['fqdn']['udr'] if 'fqdn' in conf.keys() and 'udr' in conf['fqdn'].keys() else 'oai-udr' }}"
      };

      NRF :
      {
        IPV4_ADDRESS = "127.0.0.1";
        # YOUR NRF CONFIG HERE (default: 80)
        PORT         = 80;
        # YOUR NRF API VERSION HERE
        API_VERSION  = "v1";
        FQDN         = "{{ conf['fqdn']['nrf'] if 'fqdn' in conf.keys() and 'nrf' in conf['fqdn'].keys() else 'oai-nrf' }}";
      };
    };

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oai-udm-controller
  namespace: oaiops
  labels:
    app.kubernetes.io/name: oai-udm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: oai-udm
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: oai-udm
    spec:
      # securityContext:
      #   runAsGroup: 0
      #   runAsUser: 0
      imagePullSecrets:
      - name: regcred
      containers:
      - name: udm-controller
        image: "docker.io/arorasagar/oai-udm-controller:v1.5.1"
        imagePullPolicy: Always
        command:
        - 'kopf'
        - 'run' 
        - '/root/.local/controller.py'
        - '--all-namespaces'
        - '--liveness=http://0.0.0.0:8080/healthz'
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        env:
          - name: 'NF_TYPE'
            value: 'udm'
          - name: 'DEPLOYMENT_FETCH_INTERVAL'
            value: '1'
          - name: 'DEPLOYMENT_FETCH_ITERATIONS'
            value: '100'
          - name: 'NF_CONF_PATH'
            value: '/tmp/nf/udm.conf'
          - name: 'OP_CONF_PATH'
            value: '/tmp/op/udm.yaml'
        volumeMounts:
          - mountPath: /tmp/op
            name: opconf
          - mountPath: /tmp/nf
            name: nfconf
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "100m"
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "50m"
        resources:
          requests:
            memory: "128Mi"
            cpu: "50m"
          limits:
            memory: "250Mi"
            cpu: "300m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 30
      volumes:
      - configMap:
          name: oai-udm-op-conf
        name: opconf
      - configMap:
          name: oai-udm-nf-conf
        name: nfconf
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      serviceAccountName: oai-udm-operator
      terminationGracePeriodSeconds: 5
